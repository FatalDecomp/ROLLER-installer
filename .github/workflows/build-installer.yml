name: Build ROLLER Installer

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os-name }} Binary
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os-name: Linux
            arch: x86_64
            binary-suffix: ""
            ubi-suffix: ""
            artifact-name: roller-installer-linux-x64
            cache-key: linux-x64
          - os: ubuntu-latest
            os-name: Linux
            arch: aarch64
            binary-suffix: ""
            ubi-suffix: ""
            artifact-name: roller-installer-linux-arm64
            cache-key: linux-arm64
          - os: macos-14
            os-name: macOS
            arch: arm64
            binary-suffix: ""
            ubi-suffix: ""
            artifact-name: roller-installer-macos-arm64
            cache-key: macos-arm64
          - os: windows-2022
            os-name: Windows
            arch: x86_64
            binary-suffix: ".exe"
            ubi-suffix: ".exe"
            artifact-name: roller-installer-windows-x64
            cache-key: windows-x64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true
          experimental: true

      - name: Install Poetry dependencies
        run: |
          mise run deps

      - name: Build installer binary with optimizations
        run: |
          mise run build

      - name: Show binary size
        working-directory: dist
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ls -lh roller-installer.exe
            echo "Size: $(du -h roller-installer.exe | cut -f1)"
          else
            ls -lh roller-installer
            echo "Size: $(du -h roller-installer | cut -f1)"
          fi

      - name: Test binary execution
        working-directory: dist
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ./roller-installer.exe --help || echo "Binary test completed with exit code $?"
          else
            ./roller-installer --help || echo "Binary test completed with exit code $?"
          fi

      - name: Cache ubi binary
        id: cache-ubi
        uses: actions/cache@v4
        with:
          path: dist/ubi${{ matrix.ubi-suffix }}
          key: ubi-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('mise.toml') }}
          restore-keys: |
            ubi-${{ runner.os }}-${{ matrix.arch }}-
            ubi-${{ runner.os }}-

      - name: Download ubi binary
        if: steps.cache-ubi.outputs.cache-hit != 'true'
        working-directory: dist
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            powershell -exec bypass -c "Invoke-WebRequest -URI 'https://raw.githubusercontent.com/houseabsolute/ubi/master/bootstrap/bootstrap-ubi.ps1' -UseBasicParsing | Invoke-Expression"
          else
            # For cross-compilation on Linux ARM64, we need to set the target architecture
            if [[ "${{ matrix.arch }}" == "aarch64" && "${{ runner.os }}" == "Linux" ]]; then
              export TARGET_ARCH="aarch64"
            fi
            curl --silent --location https://raw.githubusercontent.com/houseabsolute/ubi/master/bootstrap/bootstrap-ubi.sh | TARGET=$(pwd) sh
          fi

      - name: Verify binaries
        working-directory: dist
        shell: bash
        run: |
          # List contents of dist directory
          ls -la

          # Verify both binaries exist
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [[ ! -f "roller-installer.exe" || ! -f "ubi.exe" ]]; then
              echo "Missing binaries!"
              exit 1
            fi
            echo "✓ Found roller-installer.exe and ubi.exe"
          else
            if [[ ! -f "roller-installer" || ! -f "ubi" ]]; then
              echo "Missing binaries!"
              exit 1
            fi
            echo "✓ Found roller-installer and ubi"
          fi

      - name: Upload artifact (folder)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: dist/
          retention-days: 30
          if-no-files-found: error
          compression-level: 6

  # Only upload artifacts as separate files for manual testing
  upload-artifacts:
    name: Upload Build Artifacts
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release ZIPs from artifacts
        run: |
          cd artifacts

          # Each artifact is already in a folder, create a ZIP from each
          for dir in */; do
            name="${dir%/}"
            echo "Creating ${name}.zip from ${dir} contents"
            cd "$dir"
            zip -r "../${name}.zip" *
            cd ..
            rm -rf "$dir"  # Remove the folder after zipping
          done

          # List created ZIPs
          echo "=== Created ZIPs ==="
          ls -la *.zip

      - name: Create checksums
        run: |
          cd artifacts
          # Create SHA256 checksums for all ZIP files
          for zip in *.zip; do
            sha256sum "$zip" >> checksums.txt
          done

          echo "=== Checksums ==="
          cat checksums.txt

      - name: Upload development artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-installer-artifacts
          path: artifacts/
          retention-days: 7

  # Job to verify all builds completed successfully
  build-status:
    name: Build Status Check
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Check build results
        run: |
          echo "Build results:"
          echo "Linux: ${{ needs.build.result }}"

          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "One or more builds failed"
            exit 1
          fi

          echo "All builds completed successfully!"

      - name: Build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status | ZIP Contents |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|--------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linux x64 | ✅ Success | roller-installer + ubi |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux ARM64 | ✅ Success | roller-installer + ubi |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS ARM64 | ✅ Success | roller-installer + ubi |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows x64 | ✅ Success | roller-installer.exe + ubi.exe |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All installer ZIP packages built successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Each ZIP contains both the roller-installer binary and the ubi binary for self-contained distribution." >> $GITHUB_STEP_SUMMARY
